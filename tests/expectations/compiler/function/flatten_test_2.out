namespace = "Compile"
expectation = "Pass"
outputs = [[
    { compile = [{ initial_symbol_table = "9e57e65210ef32910c6d8f0fe0400f29ad320300aab89f780458722694f6f862", type_checked_symbol_table = "fdd69bb74cee526091393b6a1983534172224b2b571a881d4376f251b7cf7b4e", unrolled_symbol_table = "fdd69bb74cee526091393b6a1983534172224b2b571a881d4376f251b7cf7b4e", initial_ast = "47182c12d4f7003819d71a9e7e352077b302b73e11037a316f0a141fbe4b9b12", unrolled_ast = "47182c12d4f7003819d71a9e7e352077b302b73e11037a316f0a141fbe4b9b12", ssa_ast = "245399f8485816f9687ebe4a758067ee86c38c65772e11c7e952e3efba46c45c", flattened_ast = "1cbaf23a82ac78edd880cce14f97ca791ad05586c2b298305b5d116c66f741cd", destructured_ast = "7399f593b39548470b1c26f25ca1336b4c565f30383515c19bf2b7d2b7595194", inlined_ast = "7399f593b39548470b1c26f25ca1336b4c565f30383515c19bf2b7d2b7595194", dce_ast = "867c80b990ef129c07631f494d2f26a249d769cae7f407ea569112d696db659c", bytecode = """
program test.aleo;

struct TokenInfo:
    id as u64;

function add_new_liquidity_token_2:
""", errors = "", warnings = "" }] },
    { compile = [{ initial_symbol_table = "2645407f9ede04b353e82835d65996cf912fd1e8634a61f461d457a92305b9ce", type_checked_symbol_table = "4e9ce7072216712da8f565266c66371443d6761ea10f891042d97b457145b669", unrolled_symbol_table = "4e9ce7072216712da8f565266c66371443d6761ea10f891042d97b457145b669", initial_ast = "ae96cef2402ff3fac80cc3363313fbdff221e2bfbf5ce30655bc1985be92210b", unrolled_ast = "ae96cef2402ff3fac80cc3363313fbdff221e2bfbf5ce30655bc1985be92210b", ssa_ast = "70025d49470fabc8804bb98b54ae1d0d0d5d5943fc9d3e6e76b708f346aef7c1", flattened_ast = "806c948265ae74e02fa0130bf2f66a572c0327341a6d990031fa5afee46a4182", destructured_ast = "2863f3ca7be0e5bbfd5754c2e091dc6481bce1473d91b5bff1256ebb63e48f55", inlined_ast = "2863f3ca7be0e5bbfd5754c2e091dc6481bce1473d91b5bff1256ebb63e48f55", dce_ast = "2863f3ca7be0e5bbfd5754c2e091dc6481bce1473d91b5bff1256ebb63e48f55", bytecode = """
program test.aleo;

struct TokenInfo:
    id as u64;

function add_new_liquidity_token_2:
    cast 0u64 into r0 as TokenInfo;
    is.eq r0.id 0u64 into r1;
    cast 10u64 into r2 as TokenInfo;
    not r1 into r3;
    ternary r1 r2.id r0.id into r4;
    cast r4 into r5 as TokenInfo;
""", errors = "", warnings = "" }] },
]]
